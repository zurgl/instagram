root := justfile_directory()
export TYPST_ROOT := root

set allow-duplicate-recipes := true

set positional-arguments := true

# [private]
# kaomoji:
#     typst compile --pages 1 kaomoji.typ ./img/kaomoji-1.png
#     typst compile --pages 2 kaomoji.typ ./img/kaomoji-2.png
#     typst compile --pages 3 kaomoji.typ ./img/kaomoji-3.png

# @ ----------------
# @ DEFAULT
# @ ----------------

[private]
@default:
  just -l

[group('Cleaning')]
[private]
rm:
    rm -rf ./dist/*
    touch ./dist/.gitkeep

[group('Cleaning')]
[private]
tmp: rm
    rm -rf ./tmp
    mkdir ./tmp

[group('Images')]
[private]
en-img n m: 
    typst compile --pages {{n}} pain-fr.typ ./tmp/en-{{m}}

[group('Images')]
[private]
fr-img n m: 
    typst compile --pages {{n}} pain-en.typ ./tmp/fr-{{m}}

[group('Images')]
[private]
ls-img: tmp
    #!/bin/bash
    for j in $(seq 1 5)
    do
        last=$(echo -n $(printf '%02d.png' $j ))
        typst compile --pages 1 pain-last.typ ./tmp/ls-${last}
    done

[group('Images')]
imgs: ls-img
    #!/bin/bash
    for i in $(seq 1 4)
    do
        for j in $(seq 1 10)
        do
            m=$(echo -n $(printf '%03d.png' $(( $(( $((i - 1)) * 10 )) + j)) ))
            just fr-img $i ${m}
            just en-img $i ${m}
        done
    done

[group('Media')]
vid: imgs
    ffmpeg -y -r 1 -s 960x225 -i ./tmp/fr-%03d.png -vcodec libx264 -crf 25 ./dist/fr-vid.mp4 2>/dev/null
    ffmpeg -y -r 1 -s 960x225 -i ./tmp/en-%03d.png -vcodec libx264 -crf 25 ./dist/en-vid.mp4 2>/dev/null
    ffmpeg -y -r 1 -s 960x540 -i ./tmp/ls-%02d.png -vcodec libx264 -crf 25 ./dist/ls-vid.mp4 2>/dev/null

[group('Media')]
[private]
aud-i: vid
    ffmpeg -y -ss 0 -to 40 -i ./assets/fenta.mp4 ./tmp/cfenta.mp4 2>/dev/null
    ffmpeg -y -i ./tmp/cfenta.mp4 -vn -c:a copy ./dist/fenta.m4a  2>/dev/null
    ffmpeg -y -i ./dist/fenta.m4a -filter_complex "[0:a]showwaves=s=1280x720:mode=line,format=yuv420p[v]" -map "[v]" -map 0:a -c:v libx264 -c:a copy ./dist/fenta.mp4 2>/dev/null

[group('Media')]
aud: aud-i
    ffmpeg -y -ss 0 -to 45 -i ./assets/fenta.mp4 ./tmp/cfenta1.mp4 2>/dev/null
    ffmpeg -y -i ./tmp/cfenta1.mp4 -vn -c:a copy ./dist/fenta1.m4a  2>/dev/null
    ffmpeg -y -i ./dist/fenta1.m4a -filter_complex "[0:a]showwaves=s=1280x720:mode=line,format=yuv420p[v]" -map "[v]" -map 0:a -c:v libx264 -c:a copy ./dist/fenta1.mp4 2>/dev/null

[private]
norm name w h:
    ffmpeg -y -i ./dist/{{name}}.mp4  -filter:v fps=30 ./tmp/fps-{{name}}.mp4 2>/dev/null 
    ffmpeg -y -i ./tmp/fps-{{name}}.mp4 -vf scale={{w}}:{{h}} ./tmp/sca-{{name}}.mp4 2>/dev/null
    ffmpeg -y -i ./tmp/sca-{{name}}.mp4 -b:v 1M -c:a copy ./dist/tom-{{name}}.mp4 2>/dev/null

[group('Montage')]
normalize: aud
    just norm fr-vid 960 225
    just norm en-vid 960 225
    just norm ls-vid 960 540
    just norm fenta 960 90

[group('Montage')]
stack: normalize
    ffmpeg -y -i ./dist/tom-en-vid.mp4 -i ./dist/tom-fenta.mp4 -i ./dist/tom-fr-vid.mp4 -filter_complex "vstack=inputs=3" ./dist/vres.mp4  2>/dev/null
    ffmpeg -y -f concat -i file.txt -c copy -fflags +genpts ./dist/bres.mp4  2>/dev/null
    ffmpeg -y -i ./dist/bres.mp4 -i ./dist/fenta1.m4a -c:v copy -map 0:v:0 -map 1:a:0 -c:a aac -b:a 192k -shortest ./pain.mp4  2>/dev/null
    just tmp
    just rm

